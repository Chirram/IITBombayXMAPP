# IMPORTING modules
from inputs import DatabaseConfig
import pymongo
import MySQLdb
from pymongo import MongoClient

"""
Description: 	This function  gives all the courses that the given faculty can access
It returns a list containing all the courses no_of_entriesof the faculty
Input: 
1. faculty_id : unique user_id of faculty
Output:
1. courses list : A list of courses which faculty can access
2. faculty_id   : The faculty id which was given as input

Author		 : 	Mohammed Zubairuddin
Date of creation : 	18/06/2015  
email		 :      wisestofall@gmail.com
ex:['Admin/RDM101/2015_16','IIT_BOBMAY/RDM1031/2014_T1']
"""
'''
def students_of_course(faculty_id):
	# Establish database connection and create a handle
	db = MySQLdb.connect(DatabaseConfig.MYSQL_HOST,DatabaseConfig.MYSQL_USER,DatabaseConfig.MYSQL_PWD,DatabaseConfig.MYSQL_DB )	#A child has been born from the mother connection
	cursor = db.cursor()		

	#Removes extra trailing slashes(/) from the 'faculty_id'. Sometimes they comes along with the input
	# Don't mind these lines, you wont get it. It's an internal operation, just move forward
	index=faculty_id.find('/',0,len(faculty_id))
	if(index!=-1):
		faculty_id=faculty_id[0:index]


	#query to get the list of all accessible courses for the given faculty. These couses will be displayed in the drop-down menu
	crslist_query="select DISTINCT course_id from student_courseaccessrole where user_id='"+faculty_id+"' and role='instructor' ;";		
	try:
		# Execute SQL query and Fetch the courses list
		cursor.execute(crslist_query)
		crslist = cursor.fetchall()	
		#return courselist and faculty_id to be used on the html page
		return render_to_response('mis/students_of_course.html', {"crslist":crslist,"fac_id":faculty_id})
	except:
		print "Error: Unable to fetch data" #Something is terribly wrong 	

	#close database connection
	db.close()	#Kill the boy

'''


	"""
	Description: 	This function returns the list of the student of a given course
	It also returns a list containing all the courses the faculty can access. This list will be displayed in the drop-down menu
	Input: 
	1. faculty_id : unique user_id of faculty
	2. Full course name : Organization name, coursename, semester
	Output:
	1. student list : A list of students of the given course
	2. courses list : A list of courses which faculty can access
	3. faculty_id   : The faculty id which was given as input
	4. Total_records : Total No. of records
	5. Page_No	 : The page number which was given as input
	6. No_of_entries : The number of entries which was given as input
	
	Author		 : 	Mohammed Zubairuddin
	Email		 :      wisestofall@gmail.com
	Date of creation : 	18/06/2015  
	"""


#If this comment is removed, the program will blow up
def students_of_course_result_display(faculty_id,coursename,semester,page_no,no_of_entries):

	#Removes extra trailing slashes(/) from the 'faculty_id'. Sometimes they comes along with the input
	# Don't mind these lines, you wont get it. It's an internal operation, just move on
	index=faculty_id.find('/',0,len(faculty_id))
	if(index!=-1):
		faculty_id=faculty_id[0:index]
	cname=orgname+"/"+coursename+"/"+semester;

	# Establish database connection and create two cursor object
	db = MySQLdb.connect("10.105.24.33","root","edx","edxapp" )	
	cursor = db.cursor()
	cursor1 = db.cursor()
	cursor2 = db.cursor()
	
	# verify whether the user is authorization over the course
	validation_query="SELECT count(*) as count FROM student_courseaccessrole WHERE course_id='"+cname+"' and user_id="+faculty_id+" and (role='instructor' or role='staff')";
	try:
		# Execute SQL query and fetch the data
		cursor.execute(validation_query)
		data = cursor.fetchall()	
		count=data[0][0]

		########################################	This is a well commented line!		

		if(count==0): # user is not authorized to access the course
			print "Error! Not Authorized! "
			return render_to_response('mis/students_of_course_result_display.html', {'data':(), 'cname':'Unauthorized Access!','total_records':0, 'crslist': (),'fac_id':faculty_id,'page_no':page_no, "total_pages": 0,"no_of_entries":no_of_entries})
		else:	# user is authorized to access the course details
			# A little bit of calculations for pagination process. if you dont get it, just move on
			count_records_query="select count(*) as count from student_courseenrollment where course_id='"+cname+"' and is_active=1";
			total_records=0;
			try:		
				cursor2.execute(count_records_query)
				count_records = cursor2.fetchall()	
				total_records=count_records[0][0];
			except:
				print "unable to fetch data :: breaking point-1 "#This should never happen
			
			#you are not meant to understand this. Just remember that it calculates offset to be used in sql for pagination	
			offset=0;			
			total_pages=1;
			if(no_of_entries>total_records):	
				total_pages=-(-(int(total_records))/(int(no_of_entries)))
				offset=int(no_of_entries)*(int(page_no)-1);
				if(offset>total_records):
					offset=0
					page_no=1
						
			# query to get the list of the courses user can access inorder to display it in the drop-down menu
			courses_list_query="select DISTINCT course_id from student_courseaccessrole where user_id='"+faculty_id+"' and (role='instructor' or role='staff');";
			
			# query to get the list of students of the course
			query = """SELECT Table2.user_id, Table2.username, auth_userprofile.name FROM auth_userprofile RIGHT JOIN (SELECT Table1.user_id, auth_user.username FROM auth_user INNER JOIN (SELECT user_id FROM student_courseenrollment WHERE course_id = '"""+cname+"""' AND is_active=1 ORDER BY user_id LIMIT """+str(no_of_entries)+""" OFFSET """+str(offset)+""") AS Table1 ON auth_user.id=Table1.user_id) As Table2 ON Table2.user_id=auth_userprofile.user_id ORDER BY Table2.username""";
			try:
				
				# Execute SQL queries and fetch the courses list
				cursor1.execute(courses_list_query)
				crslist = cursor1.fetchall()
				cursor.execute(query)		
				data = cursor.fetchall()

				# return the course list, student list, total count, faculty id

				return render_to_response('mis/students_of_course_result_display.html', {'data':data, 'cname':cname,'total_records':total_records, 'crslist': crslist,'fac_id':faculty_id,'page_no':page_no, 'total_pages': total_pages, 'no_of_entries':no_of_entries})
			except:
				print "Error: Unable to fetch data :: breaking point-2"	# Something's gone crazy
				
	except:
		print "Error: Unable to fetch data :: breaking point-3"	#If this happens, then prepare yourself for the wrost 
	# Disconnect from server	
	db.close()


